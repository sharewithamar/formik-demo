[{"G:\\Formik\\formik-demo\\src\\index.js":"1","G:\\Formik\\formik-demo\\src\\components\\YoutubeForm.js":"2"},{"size":500,"mtime":1607355611677,"results":"3","hashOfConfig":"4"},{"size":4923,"mtime":1607390742219,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"8fkodo",{"filePath":"8","messages":"9","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"G:\\Formik\\formik-demo\\src\\index.js",[],"G:\\Formik\\formik-demo\\src\\components\\YoutubeForm.js",["11","12"],"import React from 'react';\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage,\r\n  FieldArray,\r\n  useFormik,\r\n} from 'formik';\r\nimport * as Yup from 'yup';\r\nimport TextError from './TextError';\r\n\r\nconst initialValues = {\r\n  name: 'amar',\r\n  email: '',\r\n  channel: '',\r\n  commennts: '',\r\n  address: '',\r\n  social: {\r\n    facebook: '',\r\n    twitter: '',\r\n  },\r\n  phoneNumbers: ['', ''],\r\n  phNumbers: [''],\r\n};\r\n\r\nconst onSubmit = (values) => {\r\n  console.log(values);\r\n};\r\n\r\nconst validationSchema = Yup.object({\r\n  name: Yup.string().required('Your Name is Required'),\r\n  email: Yup.string().email('Invalid email format').required('Required'),\r\n  channel: Yup.string().required('Channel Name is Required'),\r\n  address: Yup.string().required('Your Address is Required'),\r\n});\r\nfunction YoutubeForm(props) {\r\n  /*  const formik = useFormik({\r\n    initialValues,\r\n    onSubmit,\r\n    //validate,\r\n    validationSchema,\r\n  }); */\r\n\r\n  // console.log('form values', formik.values);\r\n  // console.log('form errors', formik.errors);\r\n  //   console.log('Visisted fields', formik.touched);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      validationSchema={validationSchema}\r\n      onSubmit={onSubmit}\r\n    >\r\n      <Form>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"name\">Name</label>\r\n          <Field type=\"text\" id=\"name\" name=\"name\" />\r\n          <ErrorMessage name=\"name\" component={TextError} />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"email\">Email</label>\r\n          <Field type=\"email\" id=\"email\" name=\"email\" />\r\n          <ErrorMessage name=\"email\">\r\n            {(errorMsg) => {\r\n              return <div className=\"error\">{errorMsg}</div>;\r\n            }}\r\n          </ErrorMessage>\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"channel\">Name</label>\r\n          <Field\r\n            type=\"text\"\r\n            id=\"channel\"\r\n            name=\"channel\"\r\n            placeholder=\"youtube channel name\"\r\n          />\r\n          <ErrorMessage name=\"channel\" />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"comments\">Comments</label>\r\n          <Field as=\"textarea\" id=\"comments\" name=\"comments\" />\r\n          <ErrorMessage name=\"comments\" />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"address\">Address</label>\r\n          <Field name=\"address\">\r\n            {(props) => {\r\n              //field,form,meta\r\n              //  console.log(props);\r\n              const { field, form, meta } = props;\r\n              return (\r\n                <div>\r\n                  <input id=\"address\" {...field} />\r\n                  {meta.touched && meta.error ? <div>{meta.error}</div> : null}\r\n                </div>\r\n              );\r\n            }}\r\n          </Field>\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"facebook\">Facebook profile</label>\r\n          <Field type=\"text\" id=\"comments\" name=\"social.facebook\" />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"twitter\">Twitter profile</label>\r\n          <Field type=\"text\" id=\"twitter\" name=\"social.twitter\" />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"primaryPh\">Primary Phone Number</label>\r\n          <Field type=\"text\" id=\"primaryPh\" name=\"phoneNumbers[0]\" />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"secondaryPh\">Secondary Phone Number</label>\r\n          <Field type=\"text\" id=\"secondaryPh\" name=\"phoneNumbers[1]\" />\r\n        </div>\r\n\r\n        <div className=\"form-control\">\r\n          <label>List of Phone numbers</label>\r\n          <FieldArray name=\"phNumbers\">\r\n            {(fieldArrayProps) => {\r\n              //console.log('fieldArrayProps', fieldArrayProps);\r\n              const { push, remove, form } = fieldArrayProps;\r\n              const { values } = form;\r\n              const { phNumbers } = values;\r\n              return (\r\n                <div>\r\n                  {phNumbers.map((phNumber, index) => {\r\n                    return (\r\n                      <div key={index}>\r\n                        <Field name={`phNumbers[${index}]`} />\r\n                        {index > 0 && (\r\n                          <button type=\"button\" onClick={() => remove(index)}>\r\n                            -\r\n                          </button>\r\n                        )}\r\n\r\n                        <button type=\"button\" onClick={() => push('')}>\r\n                          +\r\n                        </button>\r\n                      </div>\r\n                    );\r\n                  })}\r\n                </div>\r\n              );\r\n            }}\r\n          </FieldArray>\r\n        </div>\r\n\r\n        <button type=\"submit\">Submit</button>\r\n      </Form>\r\n    </Formik>\r\n  );\r\n}\r\n\r\nexport default YoutubeForm;\r\n",{"ruleId":"13","severity":1,"message":"14","line":8,"column":3,"nodeType":"15","messageId":"16","endLine":8,"endColumn":12},{"ruleId":"13","severity":1,"message":"17","line":92,"column":30,"nodeType":"15","messageId":"16","endLine":92,"endColumn":34},"no-unused-vars","'useFormik' is defined but never used.","Identifier","unusedVar","'form' is assigned a value but never used."]